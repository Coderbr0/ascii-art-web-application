package main

import (
	"html/template" // We can use html/template to keep the HTML in a separate file,
	"log"           // allowing us to change the layout of our edit page without modifying the underlying Go code.
	"net/http"      // The html/template package helps guarantee that only safe and correct-looking HTML is generated by template actions.
	"os"
	"regexp" // regexp to overcome security flaw
)

func main() {
	http.HandleFunc("/view/", makeHandler(viewHandler)) // http.HandleFunc. It takes an http.ResponseWriter and an http.Request as its arguments.
	http.HandleFunc("/edit/", makeHandler(editHandler)) // An http.ResponseWriter value assembles the HTTP server's response;
	http.HandleFunc("/save/", makeHandler(saveHandler)) // by writing to it, we send data to the HTTP client.
	// An http.Request is a data structure that represents the client HTTP request. r.URL.Path is the path component of the request URL.

	log.Fatal(http.ListenAndServe(":8080", nil)) // ListenAndServe always returns an error, since it only returns when an unexpected error occurs.
	// In order to log that error we wrap the function call with log.Fatal.
}

type Page struct { // The Page struct describes how page data will be stored in memory.
	Title string
	Body  []byte
}

func (p *Page) save() error { // But what about persistent storage? We can address that by creating a save method on Page;
	// This method's signature reads: "This is a method named save that takes as its receiver p, a pointer to Page.
	// It takes no parameters, and returns a value of type error."
	filename := p.Title + ".txt"
	return os.WriteFile(filename, p.Body, 0600) // If all goes well, Page.save() will return nil (the zero-value for pointers, interfaces, and some other types).
}

// The octal integer literal 0600, passed as the third parameter to WriteFile,
// indicates that the file should be created with read-write permissions for the current user only.

// In addition to saving pages, we will want to load pages, too:
func loadPage(title string) (*Page, error) {
	filename := title + ".txt"
	body, err := os.ReadFile(filename)
	if err != nil {
		return nil, err
	}
	return &Page{Title: title, Body: body}, nil
}

func viewHandler(w http.ResponseWriter, r *http.Request, title string) {
	p, err := loadPage(title)
	if err != nil {
		http.Redirect(w, r, "/edit/"+title, http.StatusFound) // The http.Redirect function adds an HTTP status code of http.StatusFound (302)
		return                                                // and a Location header to the HTTP response.
	} // If the requested Page doesn't exist, it should redirect the client to the edit Page
	renderTemplate(w, "view", p) // so the content may be created
}

func editHandler(w http.ResponseWriter, r *http.Request, title string) {
	p, err := loadPage(title)
	if err != nil {
		p = &Page{Title: title}
	}
	renderTemplate(w, "edit", p)
}

func saveHandler(w http.ResponseWriter, r *http.Request, title string) { // The function saveHandler will handle the submission of forms located on the edit pages.
	body := r.FormValue("body")                  // FormValue is of type string. We must convert that value to []byte before it will fit into the Page struct.
	p := &Page{Title: title, Body: []byte(body)} // We use []byte(body) to perform the conversion.
	err := p.save()                              // If all goes well, Page.save() will return nil (the zero-value for pointers, interfaces, and some other types).
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	http.Redirect(w, r, "/view/"+title, http.StatusFound) // The save() method is then called to write the data to a file, and the client
	// is redirected to the /view/ page.
}

var templates = template.Must(template.ParseFiles("edit.html", "view.html")) // template.ParseFiles will read the contents of edit.html and view.html and
// return a *template.Template.

func renderTemplate(w http.ResponseWriter, tmpl string, p *Page) { // A function to remove duplication of code from viewHandler and editHandler

	err := templates.ExecuteTemplate(w, tmpl+".html", p) // The method t.Execute executes the template, writing the generated HTML to the http.ResponseWriter.
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
	}
}

var validPath = regexp.MustCompile("^/(edit|save|view)/([a-zA-Z0-9]+)$") // MustCompile is distinct from Compile in that it will panic if the expression compilation
// fails, while Compile returns an error as a second parameter.
func makeHandler(fn func(http.ResponseWriter, *http.Request, string)) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) { // The returned function is called a closure because it encloses values defined outside of it.
		m := validPath.FindStringSubmatch(r.URL.Path) // In this case, the variable fn (the single argument to makeHandler) is enclosed by the closure.
		if m == nil {                                 // The variable fn will be one of our save, edit, or view handlers.
			http.NotFound(w, r) // r.URL.Path is the path component of the request URL.
			return
		}
		fn(w, r, m[2])
	}
}
